// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Wonka = require("wonka/src/Wonka.bs.js");

console.log("Hello, BuckleScript and Reason!");

var _map = {"white":"white","black":"black"};

var _revMap = {"white":"white","black":"black"};

function staticColorToJs(param) {
  return _map[param];
}

function staticColorFromJs(param) {
  return _revMap[param];
}

var _map$1 = {"background":"background","foreground":"foreground"};

var _revMap$1 = {"background":"background","foreground":"foreground"};

function themeStyleColorToJs(param) {
  return _map$1[param];
}

function themeStyleColorFromJs(param) {
  return _revMap$1[param];
}

function colorFromJs(str) {
  var maybeThemeStyleColor = themeStyleColorFromJs(str);
  var maybeStaticColor = staticColorFromJs(str);
  if (maybeThemeStyleColor !== undefined) {
    if (maybeStaticColor !== undefined) {
      return ;
    } else {
      return maybeThemeStyleColor;
    }
  } else if (maybeStaticColor !== undefined) {
    return maybeStaticColor;
  } else {
    return ;
  }
}

console.log(colorFromJs("white"));

function waitForArray(param) {
  return Promise.resolve([
              1,
              2,
              3
            ]);
}

var source = Wonka.make(function (observer) {
      var next = observer.next;
      var complete = observer.complete;
      var cancelled = {
        contents: false
      };
      var promise = waitForArray(undefined);
      promise.then(function (arr) {
            if (cancelled.contents) {
              return Promise.resolve(undefined);
            } else {
              $$Array.iter(next, arr);
              return Promise.resolve(Curry._1(complete, undefined));
            }
          });
      return function () {
        cancelled.contents = true;
        
      };
    });

exports.staticColorToJs = staticColorToJs;
exports.staticColorFromJs = staticColorFromJs;
exports.themeStyleColorToJs = themeStyleColorToJs;
exports.themeStyleColorFromJs = themeStyleColorFromJs;
exports.colorFromJs = colorFromJs;
exports.waitForArray = waitForArray;
exports.source = source;
/*  Not a pure module */
